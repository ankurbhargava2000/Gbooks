@model GarmentSoft.Models.PurchaseOrder
@{
    ViewBag.Title = "Edit Purchase Order";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section css{
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.12.4/css/bootstrap-select.min.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />
}
<div class="portlet light">
    <div class="portlet-title">
        <div class="caption font-red-sunglo">
            <i class="icon-speech font-red-sunglo"></i>
            <span class="caption-subject bold uppercase">Edit Purchase Order</span>
        </div>
        <div class="actions">
            <a href="@Url.Action("Index")" class="btn btn-circle btn-default">
                <i class="fa fa-arrow-left"></i> Back
            </a>
            <a class="btn btn-circle btn-icon-only btn-default fullscreen" href="javascript:;" data-original-title="" title="">
            </a>
        </div>
    </div>
    <div class="portlet-body">
        @using (Html.BeginForm())
        {
            <div class="container-fluid">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(x => x.created_by, new { Value = Session["UserID"] })
                @Html.HiddenFor(x => x.FinancialYear_Id, new { Value = Session["FinancialYearID"] })
                @Html.HiddenFor(x => x.Company_Id, new { Value = Session["CompanyId"] })
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <label>Invoice #</label>
                            @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control", @id = "InvoiceNo" } })
                            @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger InvoiceNoVal" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Vendor</label>
                            @Html.DropDownList("VendorId", null, htmlAttributes: new { @class = "form-control", @id = "Vendor" })
                            @Html.ValidationMessageFor(model => model.VendorId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Purchase Date</label>
                            @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control", Id = "InvoiceDate", required = "true" } })
                            @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <label>Dispatch Through</label>
                            @Html.EditorFor(model => model.dispatched_through, new { htmlAttributes = new { @class = "form-control", @id = "DispatchThrough" } })
                            @Html.ValidationMessageFor(model => model.dispatched_through, "", new { @class = "text-danger DispatchThroughVal" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Dispatch Document #</label>
                            @Html.EditorFor(model => model.dispatch_document_number, new { htmlAttributes = new { @class = "form-control", @id = "DocumentNo" } })
                            @Html.ValidationMessageFor(model => model.dispatch_document_number, "", new { @class = "text-danger DocumentNoVal" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Destination</label>
                            @Html.EditorFor(model => model.destination, new { htmlAttributes = new { @class = "form-control", @id = "Destination" } })
                            @Html.ValidationMessageFor(model => model.destination, "", new { @class = "text-danger DestinationVal" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <label>Bale Nos</label>
                            @Html.EditorFor(model => model.bale_numbers, new { htmlAttributes = new { @class = "form-control", @id = "BaleNo" } })
                            @Html.ValidationMessageFor(model => model.bale_numbers, "", new { @class = "text-danger BaleNoVal" })
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="form-group">
                            <label>Description</label>
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @id = "Description" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger InvoiceNoVal" })
                        </div>
                    </div>
                </div>
                @*<div class="row">
                        <div  class="col-md-6 col-xs-12">
                            <div class="form-group">
                                <div class="col-md-2">
                                </div>
                                <div class="col-xs-12 col-md-8">
                                    <input id="btnShowModal" type="button" value="Add Product" class="btn btn-success" />
                                </div>
                            </div>
                        </div>
                    </div>*@
                <div class="row">
                    <table class="table">
                        <tbody>
                            <tr>
                                <td>
                                    <label class="productName">Product Name</label>
                                    @Html.DropDownList("ProductId", null, htmlAttributes: new { @class = "form-control", @id = "product" })
                                    @Html.ValidationMessage("ProductId", "", new { @class = "text-danger productIdVal" })
                                    <input type="hidden" class="IdEdit" id="IdEdit" />
                                    <input type="hidden" class="countEdit" id="countEdit" />
                                </td>
                                <td>
                                    <label class="productQuantity">Quantity</label>
                                    @Html.Editor("Quantity", new { htmlAttributes = new { @class = "form-control", @id = "quantity" } })
                                    @Html.ValidationMessage("Quantity", "", new { @class = "text-danger quantityVal" })
                                </td>
                                <td>
                                    <label class="productFold">Fold</label>
                                    @Html.Editor("Fold", new { htmlAttributes = new { @class = "form-control", @id = "fold" } })
                                    @Html.ValidationMessage("Fold", "", new { @class = "text-danger foldVal" })
                                </td>
                                <td>
                                    <label class="productRate">Rate</label>
                                    @Html.Editor("Rate", new { htmlAttributes = new { @class = "form-control", @id = "rate" } })
                                    @Html.ValidationMessage("Rate", "", new { @class = "text-danger rateVal" })
                                </td>
                                <td class="itemEditRow">
                                    <label>&nbsp;</label>
                                    <button class="btn btn-block btn-success" type="button" id="addProductItem">Add</button>
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </div>

                <div class="row">
                    <div class="col-md-8 col-xs-12">
                        <div class="form-group">
                            <table class="table table-striped table-advance table-hover" id="purchaseOrderItems">
                                <tr id="productItemRow">
                                    <td>
                                        <label class="productName">Product Name</label>
                                        <input type="hidden" class="productId" value="" />
                                        <input type="hidden" class="Id" value="" />
                                        <input type="hidden" class="rowCount" value="" />
                                    </td>
                                    <td>
                                        <label class="productQuantity">Quantity</label>
                                    </td>
                                    <td>
                                        <label class="productFold">Fold</label>
                                    </td>
                                    <td>
                                        <label class="productRate">Rate</label>
                                    </td>
                                    <td class="itemEditRow"></td>
                                </tr>
                                @if (Model != null && Model.PurchaseDetails != null)
                                {
                                    var count = 0;
                                    long subtotal = 0;
                                    foreach (var item in Model.PurchaseDetails)
                                    {
                                        count++;
                                        <tr id="productItemRow">
                                            <td>
                                                <label class="productName">@item.Product.ProductName</label>
                                                <input type="hidden" class="productId" value="@item.Product.Id" />
                                                <input type="hidden" class="Id" value="@item.Id" />
                                                <input type="hidden" class="rowCount" value="@count" />
                                            </td>
                                            <td>
                                                <label class="productQuantity">@item.Quantity</label>
                                            </td>
                                            <td>
                                                <label class="productFold">@item.Fold</label>
                                            </td>
                                            <td>
                                                <label class="productRate">@item.Rate</label>
                                            </td>
                                            <td class="itemEditRow">
                                                <button type="button" class="btn btn-warning btn-xs editItem" title="Edit"><i class="fa fa-pencil"></i></button>
                                                <button type="button" class="btn btn-danger btn-xs remove" title="Delete"><i class="fa fa-trash-o"></i></button>
                                            </td>
                                        </tr>
                                        subtotal += Convert.ToInt64(item.Quantity * item.Rate);
                                    }
                                }
                            </table>
                        </div>
                    </div>
                    <div class="col-md-4 col-xs-12">
                        <div class="form-group">

                            <table class="table">
                                <tr>
                                    <td style="width: 70%">
                                        Subtotal
                                    </td>
                                    <td id="sub_total">
                                        @Model.GrossAmount
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        Discount
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", id = "discount" } })
                                        @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        Total
                                    </td>
                                    <td id="total_Amount">
                                        @Model.NetAmount
                                    </td>
                                </tr>
                            </table>
                            <div>
                                <div>
                                    <button id="btnSubmit" type="button" class="btn btn-block btn-success">
                                        Save Purchase Order
                                    </button>
                                    @*@Html.ActionLink("Close", "Index", "PurchaseOrders", new { @class = "btn btn-danger" })*@
                                </div>
                                <div>
                                    <input type="hidden" name="gross_amount" id="gross" value="@Model.GrossAmount">
                                    <input type="hidden" name="net_amount" id="total" value="@Model.NetAmount">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="row">
                        <div class="col-md-6 col-xs-12">
                            <div class="form-group">
                                <div class="col-md-2">
                                </div>
                                <div class="col-xs-12 col-md-8">
                                    <input type="button" id="btnSubmit" class="btn btn-success" value="Save Purchase Order" />
                                    @Html.ActionLink("Close", "Index", "PurchaseOrders", new { @class = "btn btn-danger" })
                                </div>
                            </div>
                        </div>
                    </div>*@

                @*<div class="modal fade" tabindex="-1" id="itemModel"
                         data-keyboard="false" data-backdrop="static">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal">
                                        ×
                                    </button>
                                    <h4 class="modal-title">Add Product</h4>
                                </div>
                                <div class="modal-body">
                                    <form>
                                        <div class="form-group">
                                            @Html.Label("Product", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.DropDownList("ProductId", null, htmlAttributes: new { @class = "form-control", @id = "product" })
                                                @Html.ValidationMessage("ProductId", "", new { @class = "text-danger productIdVal" })
                                                <input type="hidden" class="IdEdit" id="IdEdit" />
                                                <input type="hidden" class="countEdit" id="countEdit" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.Label("Quantity", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.Editor("Quantity", new { htmlAttributes = new { @class = "form-control", @id = "quantity" } })
                                                @Html.ValidationMessage("Quantity", "", new { @class = "text-danger quantityVal" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.Label("Rate", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.Editor("Rate", new { htmlAttributes = new { @class = "form-control", @id = "rate" } })
                                                @Html.ValidationMessage("Rate", "", new { @class = "text-danger rateVal" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.Label("Fold", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.Editor("Fold", new { htmlAttributes = new { @class = "form-control", @id = "fold" } })
                                                @Html.ValidationMessage("Fold", "", new { @class = "text-danger foldVal" })
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button id="addProductItem" type="button" class="btn btn-success">Add Product</button>
                                </div>
                            </div>
                        </div>
                    </div>*@
            </div>
        }
    </div>
</div>
@section scripts
{
    <!-- DateRanger -->
    <script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            //$("#btnShowModal").click(function () {
            //    $('#quantity').val('');
            //    $('#fold').val('');
            //    $('#rate').val('');
            //    $('#IdEdit').val('');
            //    $('#countEdit').val('');
            //});

            $('#InvoiceDate').daterangepicker({
                locale: {
                    format: 'DD-MMM-YYYY'
                },
                "singleDatePicker": true,
                "startDate": "@(DateTime.Now.ToString("dd-MMM-yyyy"))",
                "minDate": "@ViewBag.StartYear",
                "maxDate": "@ViewBag.EndYear"
            });
            //$("#btnHideModal").click(function () {
            //    $("#itemModel").modal('hide');
            //    $('#quantity').val('');
            //    $('#fold').val('');
            //    $('#rate').val('');
            //    $('#IdEdit').val('');
            //    $('#countEdit').val('');

            //});

            $('#addProductItem').click(function () {
                //validation and add order items
                var isAllValid = validateModel();
                if (isAllValid) {
                    if($('#countEdit').val() == '')
                    {
                        //add new row of items
                        var $newRow = $('#productItemRow').clone().removeAttr('id');
                        $('.productId', $newRow).val($('#product').val());
                        $('.productName', $newRow).text($('#product').find("option:selected").text());
                        $('.productQuantity', $newRow).text($('#quantity').val());
                        $('.productFold', $newRow).text($('#fold').val());
                        $('.productRate', $newRow).text($('#rate').val());
                        $('.rowCount', $newRow).val($('#purchaseOrderItems tr').length + 1);
                        $('.itemEditRow', $newRow).append('<button type="button" class="btn btn-warning btn-xs editItem" title="Edit"><i class="fa fa-pencil"></i></button> <button type="button" class="btn btn-danger btn-xs remove" title="Delete"><i class="fa fa-trash-o"></i></button>');
                        $('#purchaseOrderItems').append($newRow);
                    }
                    else
                    {
                        $('#purchaseOrderItems tbody tr').each(function (index, ele) {
                            //update product list
                            if($('.rowCount', this).val() == $('#countEdit').val())
                            {
                                $('.productId', this).val($('#product').val());
                                $('.productName', this).text($('#product').find("option:selected").text());
                                $('.productQuantity', this).text($('#quantity').val());
                                $('.productFold', this).text($('#fold').val());
                                $('.productRate', this).text($('#rate').val());
                                $('#addProductItem').text("Add Product");
                            }
                        });
                    }
                    $('#quantity').val('');
                    $('#fold').val('');
                    $('#rate').val('');
                    $('#IdEdit').val('');
                    $('#countEdit').val('');
                    $('#product').siblings('span.productIdVal').text("");
                    $('#quantity').siblings('span.quantityVal').text("");
                    $('#fold').siblings('span.foldVal').text("");
                    $('#rate').siblings('span.rateVal').text("");
                    CalculateTotal();
                }
            });


            $('#purchaseOrderItems').on('click', '.editItem', function(){
                //show modelpopup with edit item
                $('#product').val($('.productId', $(this).parents('tr')).val());
                $('#quantity').val($('.productQuantity', $(this).parents('tr')).text());
                $('#fold').val($('.productFold', $(this).parents('tr')).text());
                $('#rate').val($('.productRate', $(this).parents('tr')).text());
                $('#IdEdit').val($('.Id', $(this).parents('tr')).val());
                $('#countEdit').val($('.rowCount', $(this).parents('tr')).val());
                $('#addProductItem').text("Update product");
                //$("#itemModel").modal('show');
            });

            $('#btnSubmit').click(function () {
                var isAllValid = validateMainPage();
                if (isAllValid) {
                    var list = [];
                    var errorItemCount = 0;
                    $('#purchaseOrderItems tbody tr').each(function (index, ele) {
                        if ($('.productId', this).val() != null && $('.productId', this).val() != "0" && $('.productId', this).val() != "") {
                            var orderItem = {
                                Id:$('.Id', this).val(),
                                PurchaseId: @Model.Id,
                                ProductId: $('.productId', this).val(),
                                Quantity: $('.productQuantity', this).text(),
                                Fold: $('.productFold', this).text(),
                                Rate: $('.productRate', this).text()
                            }
                            list.push(orderItem);
                        }
                    });

                    var data = {
                        Id:@Model.Id,
                        VendorId: $('#Vendor').val(),
                        InvoiceNumber: $('#InvoiceNo').val(),
                        InvoiceDate: $('#InvoiceDate').val(),
                        dispatch_document_number: $('#DocumentNo').val(),
                        dispatched_through: $('#DispatchThrough').val(),
                        destination: $('#Destination').val(),
                        bale_numbers: $('#BaleNo').val(),
                        Description: $('#Description').val(),
                        CompanyId: @Model.Company_Id,
                        financial_year: @Model.FinancialYear_Id,
                        created_by: @Model.created_by,
                        GrossAmount: $('#gross').val(),
                        NetAmount: $('#total').val(),
                        Discount: $('#discount').val(),
                        PurchaseDetails: list
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/PurchaseOrders/Edit',
                        data: JSON.stringify(data),
                        contentType: 'application/json',
                        success: function (data) {
                            if (data != "0") {
                                alert('Purchase Order Updated Successfully.');
                                window.location.href = '/PurchaseOrders/Details/' + data;
                            }
                            else {
                                // $(this).val('Save Purchase Order');
                                alert('Error in updating purchase order.');
                            }
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                }
            });

            //remove button click event
            $('#purchaseOrderItems').on('click', '.remove', function () {
                if($('.Id', $(this).parents('tr')).val() != undefined && $('.Id', $(this).parents('tr')).val() != "")
                {
                    if(confirm('Are you sure you wish to delete this product.'))
                    {
                        var data = { id: $('.Id', $(this).parents('tr')).val() };
                        $.ajax({
                            type: 'Post',
                            url: '/PurchaseOrders/DeleteProduct/',
                            data: JSON.stringify(data),
                            contentType: 'application/json',
                            success: function (data) {
                                if (data != "0") {
                                    $('#purchaseOrderItems tbody tr').each(function (index, ele) {
                                        if ($('.productId', this).val() == data) {
                                            $('.productId', this).parents('tr').remove();
                                        }
                                    });
                                }
                                else {
                                    alert('Error in deleting product.');
                                }
                                CalculateTotal();
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });
                    }
                }
                else
                {
                    $(this).parents('tr').remove();
                    CalculateTotal();
                }

            });

            // validation scripts
            function validateModel() {
                var result = true;
                if ($('#quantity').val() == "") {
                    $('#quantity').siblings('span.quantityVal').text("Please Enter Quantity.");
                    result = false;
                }
                if (isNaN($('#quantity').val())) {
                    $('#quantity').siblings('span.quantityVal').text("Please Enter number in quantity.");
                    result = false;
                }
                /*
                if ($('#fold').val() == "") {
                    $('#fold').siblings('span.foldVal').text("Please Enter Fold value.");
                    result = false;
                }*/
                if (isNaN($('#fold').val())) {
                    $('#fold').siblings('span.foldVal').text("Please Enter number in Fold.");
                    result = false;
                }
                if ($('#rate').val() == "") {
                    $('#rate').siblings('span.rateVal').text("Please Enter Rate value.");
                    result = false;
                }
                if (isNaN($('#rate').val())) {
                    $('#rate').siblings('span.rateVal').text("Please Enter number in Rate value.");
                    result = false;
                }
                $('#purchaseOrderItems tbody tr').each(function (index, ele) {
                    if ($('#countEdit').val() == '' && $('.productId', this).val() == $('#product').val()) {
                        $('#product').siblings('span.productIdVal').text("Product is already added.");
                        result = false;
                    }
                });
                return result;
            }

            $('#quantity').change(function () {
                if ($('#quantity').val() != "" && !isNaN($('#quantity').val())) {
                    $('#quantity').siblings('span.quantityVal').text("");
                }
            });
            $('#fold').change(function () {
                if ($('#fold').val() != "" && !isNaN($('#fold').val())) {
                    $('#fold').siblings('span.foldVal').text("");
                }
            });
            $('#rate').change(function () {
                if ($('#rate').val() != "" && !isNaN($('#rate').val())) {
                    $('#rate').siblings('span.rateVal').text("");
                }
            });
            $("#product").change(function () {
                $('#purchaseOrderItems tbody tr').each(function (index, ele) {
                    if ($('#countEdit').val() == '' && $('.productId', this).val() == $('#product').val()) {
                        $('#product').siblings('span.productIdVal').text("Product is already added.");
                    }
                    else
                    {
                        $('#product').siblings('span.productIdVal').text("");
                    }
                });
            });

            function validateMainPage() {
                var result = true;
                if ($('#InvoiceNo').val() == "") {
                    $('#InvoiceNo').siblings('span.InvoiceNoVal').text("Please Enter Invoice Number.");
                    result = false;
                }
                if (isNaN($('#InvoiceNo').val())) {
                    $('#InvoiceNo').siblings('span.InvoiceNoVal').text("Please Enter number in Invoice Number.");
                    result = false;
                }
                if ($('#InvoiceDate').val() == "") {
                    $('#InvoiceDate').siblings('span.InvoiceDateVal').text("Please Enter Invoice Date value.");
                    result = false;
                }
                var tableRows = $("#purchaseOrderItems tbody tr").length;

                if (tableRows <= 1) {
                    alert('Please enter at least 1 product for this invoice');
                    result = false;
                }
                return result;
            }

            $('#InvoiceNo').change(function () {
                if ($('#InvoiceNo').val() != "" && !isNaN($('#InvoiceNo').val())) {
                    $('#InvoiceNo').siblings('span.InvoiceNoVal').text("");
                }
            });
            $('#InvoiceDate').change(function () {
                if ($('#InvoiceDate').val() != "") {
                    $('#InvoiceDate').siblings('span.InvoiceDateVal').text("");
                }
            });

            $('#discount').change(function () {
                if (isNaN($('#discount').val())) {
                    alert("Please enter numeric in Discount.")
                    $('#discount').val("0");
                    return;
                }
                if (parseInt($('#discount').val()) > parseInt($("#sub_total").text())) {
                    alert("Discount can not be greater then total amount.")
                    $('#discount').val("0");
                    return;
                }
                if (parseInt($('#discount').val()) < 0) {
                    alert("Discount can not be less then 0.")
                    $('#discount').val("0");
                    return;
                }
                CalculateTotal();
            });

            function CalculateTotal() {
                var subtotal = 0;
                var discount = $('#discount').val() == "" ? 0 : $('#discount').val();
                $('#purchaseOrderItems tbody tr').each(function (index, ele) {
                    if ($('.productId', this).val() != null && $('.productId', this).val() != "0" && $('.productId', this).val() != "") {
                        var qty = $('.productQuantity', this).text()
                        var rate = $('.productRate', this).text()
                        var total = (qty * rate);
                        subtotal += total;
                    }
                });

                $("#sub_total").html(subtotal);
                $("#total_Amount").html(subtotal - discount);

                $("input#gross").val(subtotal);
                $("input#total").val(subtotal - discount);
            };
        });
    </script>
}


