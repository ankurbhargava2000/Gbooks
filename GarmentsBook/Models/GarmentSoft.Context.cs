//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GarmentSoft.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GarmentBooksEntities : DbContext
    {
        public GarmentBooksEntities()
            : base("name=GarmentBooksEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<acc_group> acc_group { get; set; }
        public virtual DbSet<acc_ledger> acc_ledger { get; set; }
        public virtual DbSet<acc_transactions> acc_transactions { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<InvoiceMaster> InvoiceMasters { get; set; }
        public virtual DbSet<MeasuringUnit> MeasuringUnits { get; set; }
        public virtual DbSet<PrinterChalanDetail> PrinterChalanDetails { get; set; }
        public virtual DbSet<PrinterChalan> PrinterChalans { get; set; }
        public virtual DbSet<PrintJobWorkReceivedDetail> PrintJobWorkReceivedDetails { get; set; }
        public virtual DbSet<PrintJobWorkReceived> PrintJobWorkReceiveds { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<TailorChalanDetail> TailorChalanDetails { get; set; }
        public virtual DbSet<TailorChalan> TailorChalans { get; set; }
        public virtual DbSet<TailorChalanSendDetail> TailorChalanSendDetails { get; set; }
        public virtual DbSet<TailorChalanSend> TailorChalanSends { get; set; }
        public virtual DbSet<TailorMaterialDetail> TailorMaterialDetails { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UserCompany> UserCompanies { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorType> VendorTypes { get; set; }
        public virtual DbSet<acc_transactions_details> acc_transactions_details { get; set; }
        public virtual DbSet<VoucherType> VoucherTypes { get; set; }
    
        public virtual ObjectResult<USP_getStockAvailableQTY_Result> USP_getStockAvailableQTY(Nullable<int> product_id, Nullable<int> companyId)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_getStockAvailableQTY_Result>("USP_getStockAvailableQTY", product_idParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<USP_ProductWiseStock_Result> USP_ProductWiseStock(Nullable<int> companyId, Nullable<int> yearId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ProductWiseStock_Result>("USP_ProductWiseStock", companyIdParameter, yearIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<USP_StockLedger_Result> USP_StockLedger(Nullable<int> product_id, Nullable<int> companyId, Nullable<int> yearId)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_StockLedger_Result>("USP_StockLedger", product_idParameter, companyIdParameter, yearIdParameter);
        }
    
        public virtual ObjectResult<USP_VendorStockLedger_Result> USP_VendorStockLedger(Nullable<int> product_id, Nullable<int> companyId, Nullable<int> vendor_id, Nullable<int> yearId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var vendor_idParameter = vendor_id.HasValue ?
                new ObjectParameter("vendor_id", vendor_id) :
                new ObjectParameter("vendor_id", typeof(int));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_VendorStockLedger_Result>("USP_VendorStockLedger", product_idParameter, companyIdParameter, vendor_idParameter, yearIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<USP_VendorWiseStock_Result> USP_VendorWiseStock(Nullable<int> vendor_id, Nullable<int> companyId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var vendor_idParameter = vendor_id.HasValue ?
                new ObjectParameter("vendor_id", vendor_id) :
                new ObjectParameter("vendor_id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_VendorWiseStock_Result>("USP_VendorWiseStock", vendor_idParameter, companyIdParameter, startDateParameter, endDateParameter);
        }
    }
}
